 1. register a new user 
 2. update an existing but unverified user 
   2.1new password 
   2.2 verification code
 IF existingUserby email if exsist -> verified ->success :false 
 else save the updated user 
 else create a new user amd than save thee new user 
 end if

 emial : resend email 
 authentication : NewAuth 


 Extending types in TypeScript, especially when working with a third-party library like **NextAuth**, provides several advantages, especially in a complex and dynamic application like one that handles authentication. Here's why extending types is beneficial:

### 1. **Custom Fields in the User Object**
   NextAuth provides a generic `User` type, which may not include all the fields that are relevant to your application's user model. For example, in your application, you might have fields like `username`, `isVerified`, `role`, or `createdAt` that are specific to your user model but not part of the default NextAuth `User` type. By extending the `User` type, you can ensure those fields are included and typed correctly throughout your application.

   **Example**: You might want to add an `isVerified` field to the `User` object, which is important for verification-related logic.

   ```typescript
   declare module "next-auth" {
     interface User {
       id: string;
       email: string;
       username: string;
       isVerified: boolean; // Custom field
     }
   }
   ```

### 2. **Maintain Type Safety**
   Without extending the types, you would have to manually manage the user data throughout your codebase, often losing the benefits of TypeScript's static typing. This can lead to runtime errors, difficult-to-maintain code, and increased risk of bugs.

   By extending the types, you ensure that the data (like `user.id` or `session.user.email`) is always used correctly, avoiding issues where properties may be missing or have the wrong type.

   **Example**: If you tried to access `user.isVerified` without extending the type, TypeScript might throw an error because it doesn't know that `isVerified` exists on the `User` type.

   ```typescript
   // Without extending, this might not be recognized as a valid property.
   if (user.isVerified) {
     // Logic...
   }
   ```

### 3. **Consistency Across the Application**
   Once you've extended the types, you ensure that your entire application knows about the custom fields you have added. This means that anywhere you use the `User`, `Session`, or `JWT` objects, TypeScript will enforce the same structure and help you avoid inconsistencies or bugs.

   **Example**: If you define custom fields like `role` in the JWT token, extending the `JWT` type makes sure that every part of your application that interacts with tokens knows to expect a `role` field.

   ```typescript
   declare module "next-auth" {
     interface JWT {
       userId: string;
       role: string;
     }
   }
   ```

### 4. **Improve Developer Experience**
   TypeScript provides **autocompletion** and **intellisense** when you're working with extended types. This improves your developer experience by making it easier to discover properties, methods, and the correct types without having to refer to documentation constantly.

   **Example**: When accessing properties of `session.user`, if the types are extended correctly, your IDE will suggest valid properties like `id`, `email`, `isVerified`, etc., as opposed to relying on generic types that may not be as helpful.

### 5. **Customization of JWT**
   If you are using JWT (JSON Web Tokens) in your application to store authentication-related information, you can extend the `JWT` type to include custom fields like `role`, `permissions`, or `userId`. This ensures that the custom claims you add to the JWT are correctly recognized across your application.

   **Example**: If you store a `userId` in the JWT, extending the `JWT` type ensures that the `userId` is typed correctly everywhere it is accessed (e.g., in API routes, middleware, etc.).

   ```typescript
   declare module "next-auth" {
     interface JWT {
       userId: string;
       role: string;
     }
   }
   ```

### 6. **Avoid Repetitive Code**
   Extending types reduces the need for repetitive checks or manual type annotations. For example, if you’re working with `session.user` and your extended `User` type includes `isVerified`, TypeScript will automatically check that field, and you won't need to manually validate it everywhere in your code.

### 7. **Better Integration with Database Models**
   If you have a custom database model for the `User`, you can map that model directly into NextAuth's types. For example, if your database stores additional user information (like a `role` or `profilePic`), extending NextAuth’s types lets you map that data seamlessly into the authentication flow without losing type safety.

   **Example**: A database model might store `profilePic`, but NextAuth’s `User` type doesn’t have that field by default. By extending the type, you ensure that it is recognized throughout your app.

### Summary

- **Custom Data**: Add any fields (like `isVerified`, `role`, etc.) that are unique to your user model.
- **Type Safety**: Ensure that the fields are always used correctly with TypeScript’s type checking.
- **Consistency**: Keep your codebase consistent by ensuring custom fields are used uniformly.
- **Developer Experience**: Take advantage of autocompletion and type inference in your editor.
- **JWT Customization**: Add and type custom JWT claims that are important to your app's logic.

In conclusion, extending types in NextAuth (or any third-party library) provides the ability to tailor authentication logic to your specific application needs, while keeping the benefits of TypeScript’s static type checking, improving the safety and maintainability of your code.





==--------------------------
pipelines 
array  -->unwind 